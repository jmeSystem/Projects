package br.com.jmesystemv1.dao;

import java.util.List;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;

import br.com.jmesystemv1.domain.JmeCliente;
import br.com.jmesystemv1.domain.JmeProduto;
import br.com.jmesystemv1.util.HibernateUtil;

public class JmeProdutoDAO {

	/**
	 * Método responsável por inserir o objeto no banco
	 * 
	 * @param produto
	 */
	public void salvar(JmeProduto produto) {

		Session sessao = HibernateUtil.getSessionFactory().openSession();
		Transaction transacao = null;

		try {
			transacao = sessao.beginTransaction();
			sessao.save(produto);
			transacao.commit();

		} catch (RuntimeException ex) {

			// se houver erro e a transação não for null, defaz a transação
			if (transacao != null) {
				transacao.rollback();
			}
		} finally {
			sessao.close();
		}
	}

	/**
	 * Método responsavel por listar todos os produtos
	 * 
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<JmeProduto> listar() {

		Session sessao = HibernateUtil.getSessionFactory().openSession();
		List<JmeProduto> produtos = null;

		try {
			Query consulta = sessao.getNamedQuery("JmeProduto.listar");
			produtos = consulta.list();
		} catch (RuntimeException ex) {
			throw ex;

		} finally {
			sessao.close();
		}
		return produtos;
	}

	/**
	 * Método Responsavel por excluir um produto selecionado
	 * 
	 * @param codigo
	 */
	public void excluir(Integer codigo) {

		Session sessao = HibernateUtil.getSessionFactory().openSession();
		Transaction transacao = null;

		try {

			transacao = sessao.beginTransaction();
			JmeProduto produto = buscarPorCodigo(codigo);
			sessao.delete(produto);
			transacao.commit(); // confirma a transação
		} catch (RuntimeException ex) {
			// se for diferente de null e desfaz toda trasação
			if (transacao != null) {
				transacao.rollback();// desfazer toda a transação
			}
			throw ex;
		} finally {
			sessao.close();
		}
	}

	/**
	 * Método responsavel por buscar um produto a partir de seu código
	 * 
	 * @param codigo
	 * @return
	 */
	public JmeProduto buscarPorCodigo(Integer codigo) {

		Session sessao = HibernateUtil.getSessionFactory().openSession();
		JmeProduto produto = null;

		try {
			Query consulta = sessao.getNamedQuery("JmeProduto.buscarPorCodigo");
			consulta.setInteger("idProduto", codigo);

			produto = (JmeProduto) consulta.uniqueResult();
		} catch (RuntimeException ex) {
			throw ex;

		} finally {
			sessao.close();
		}
		return produto;
	}

	/**
	 * Método reponsavel por alterar um produto
	 * 
	 * @param cliente
	 */
	public void editar(JmeProduto produto) {

		Session sessao = HibernateUtil.getSessionFactory().openSession();
		Transaction transacao = null; 

		try {

			transacao = sessao.beginTransaction();
			sessao.update(produto);
			transacao.commit(); 
		} catch (RuntimeException ex) {
			
			if (transacao != null) {
				transacao.rollback();// desfaz toda a transação
			}
			throw ex;
		} finally {
			sessao.close();
		}
	}

}
